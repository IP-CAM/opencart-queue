#!/usr/bin/env php
<?php

//Opencart Core
use Queue\Events;

require_once 'config.php';
require_once DIR_SYSTEM . 'startup.php';

// library
require DIR_SYSTEM . 'library/queue/vendor/autoload.php';

//Registry
$registry = new Queue\Registry();

//Config
$config = new Config();
$config->load('default');
$config->load('catalog');
$registry->set('config', $config);

//Queue setting
$settings = include DIR_SYSTEM . 'library/queue/config.php';
foreach ($settings as $key => $value){
    $config->set($key, $value);
}

// Log
$log = new Log('queue.log');
$registry->set('log', $log);

//Timezone
date_default_timezone_set($config->get('date_timezone'));

// Event
$event = new Event($registry);
$registry->set('event', $event);

// Event Register
if ($config->has('action_event')) {
    foreach ($config->get('action_event') as $key => $value) {
        foreach ($value as $priority => $action) {
            $event->register($key, new Action($action), $priority);
        }
    }
}

// Loader
$loader = new Loader($registry);
$registry->set('load', $loader);


// Request
$registry->set('request', new Request());

// Database
if ($config->get('db_autostart')) {
    $registry->set('db', new DB($config->get('db_engine'), $config->get('db_hostname'), $config->get('db_username'), $config->get('db_password'), $config->get('db_database'), $config->get('db_port')));
}

// Session
$session = new Session('file', $registry);
$registry->set('session', $session);
if ($config->get('session_autostart')) {
    $session->start();
}

// Cache
$registry->set('cache', new Cache($config->get('cache_engine'), $config->get('cache_expire')));

// Url
if ($config->get('url_autostart')) {
    $registry->set('url', new Url($config->get('site_url'), $config->get('site_ssl')));
}

// Language
$language = new Language($config->get('language_directory'));
$registry->set('language', $language);

// Config Autoload
if ($config->has('config_autoload')) {
    foreach ($config->get('config_autoload') as $value) {
        $loader->config($value);
    }
}

// Language Autoload
if ($config->has('language_autoload')) {
    foreach ($config->get('language_autoload') as $value) {
        $loader->language($value);
    }
}

// Library Autoload
if ($config->has('library_autoload')) {
    foreach ($config->get('library_autoload') as $value) {
        $loader->library($value);
    }
}

// Model Autoload
if ($config->has('model_autoload')) {
    foreach ($config->get('model_autoload') as $value) {
        $loader->model($value);
    }
}

// Route
$route = new Router($registry);

// Pre Actions
if ($config->has('action_pre_action')) {
    foreach ($config->get('action_pre_action') as $value) {
        $route->addPreAction(new Action($value));
    }
}

$route->dispatch(new Action(''), new Action(''));

\Resque_Event::listen('beforePerform', array(Events::class, 'beforePerform'));

// Run queue
putenv(sprintf('%s=%s', 'REDIS_BACKEND', $config->get('redis_backend')));
putenv(sprintf('%s=%s', 'REDIS_BACKEND_DB', $config->get('redis_db')));
putenv(sprintf('%s=%s', 'PREFIX', $config->get('redis_prefix')));
putenv(sprintf('%s=%s', 'COUNT', $config->get('queue_count')));
putenv(sprintf('%s=%s', 'QUEUE', $config->get('queue_worker')));
putenv(sprintf('%s=%s', 'VVERBOSE', $config->get('queue_vverbose')));
putenv(sprintf('%s=%s', 'LOGGING', $config->get('queue_logging')));

include DIR_SYSTEM . 'library/queue/vendor/resque/php-resque/bin/resque';

